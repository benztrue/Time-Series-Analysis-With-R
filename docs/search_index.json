[["index.html", "Time Series Analysis With R Chapter 1 Time Series Analysis With R 1.1 Objectives 1.2 Lectures 1.3 Home Work 1.4 Assessment 1.5 Syllabus and readings 1.6 Further information and support", " Time Series Analysis With R Nicola Righetti 2021-03-17 Chapter 1 Time Series Analysis With R This book will be updated as the course goes on. 1.1 Objectives This course is a practical introduction to time series analysis with R. It will introduce students to: The specificity of time series data; The free statistical software R to conduct time series analysis; Some of the main univariate and multivariate techniques to analyze time series data. At the end of the course, the students are expected to know the specificity of time series data and to be able to use R to perform simple time series analysis by applying the techniques described during the course. 1.2 Lectures 12 lectures (Thursday 11:30-13:00). Structure of the course: Theoretical concepts: this part of the course will introduce students to the main theoretical concepts of time series analysis; R Tutorial: this part of the course consists in a hands-on tutorial on the R functions necessary to perform time series analysis. Every part of a time series analysis project will be taken into account, including data wrangling, visual representation, and statistical analysis; Individual/Group work: this part of the course consists in individual and group work based on the application of the theoretical and practical knowledge described in the previous part of the course 1.3 Home Work Theoretical concepts can be studied, but you have to practice in order to learn R. 1.4 Assessment Assignments distributed during the course, dealing with demonstrating the understanding of key concepts (30%). A final data analysis project where participants will apply the knowledge and techniques learned during the course (70%). 1.5 Syllabus and readings This open book is specifically created for the 220050-1 SE SE Advanced Data Analysis 2 (2021S) course. It includes both theoretical concepts and the R tutorial with the necessary code to perform all the operations we are going to learn. The book also includes hyperlinks to additional free resources and readings. The mandatory readings will be listed in the Readings section of the book. A new part of the book will be uploaded online every weeks, following the program of the lessons. The link to this book is the following: Time-Series-Analysis-With-R. 1.6 Further information and support For any information, communication, or request for clarification, you can reach out to me at my University of Vienna address. "],["getting-started-with-r.html", "Chapter 2 Getting started with R 2.1 RStudio Interface and Data 2.2 Basic R", " Chapter 2 Getting started with R 2.1 RStudio Interface and Data 2.1.1 Download and Install RStudio This course is based on the statistical software R. R is easier to use in the development environment RStudio (it works on both Windows, Apple, and other OS). It is possible to download a free version of RStudio Desktop from the official websites. You might also use a free online version of RStudio by registering to the RStudio Cloud free plan. However, the free plan gives you just 15 hours per months. Our lessons take 4.5 hours per month, and since you also need to practice, the best choice is to install RStudio and R on your computer. Now we are going to see how to get started with RStudio Desktop. First, download and install a free version of RStudio Desktop and open the software. 2.1.2 Create a RStudio Project and Import data When starting a data analysis project with RStudio, we create a new dedicated environment where we will keep all the scripts (files containing the code to perform the analysis), data sets, and outputs of the analysis (such as plots and tables). This dedicated work-space is simply called a project. To create a new project with RStudio, follows these steps: click on File (on the top left); then, click on New Project; select New Directory, and New Project; choose a folder for the project, and give a name to your project. You can use the name Time-Series-Analysis-With-R; In this way, it will be created a new folder for the project, in the main folder specified in the previous step. In this folder, you will find a file .Rproj, the name of which is the name you assigned to your project. To work on this project, you just need to open the .Rproj file. 2.1.3 Create a Script Once the project has been created, we can open a new script and save it. A script is a file containing code. We can create a first script named basic-r-syntax, where you will test the basic code we are going to see. The script will be saved with extension .r. You can open, change, and save the file every time you work on it. To save your code is important, otherwise you would have to write the same code every time you work on the project! Create and save a script Update a script and run code 2.1.4 The RStudio User Interface The interface of RStudio is organized in four main quadrants: The top-left quadrant is the editor. Here you can create or open a script and compose the R commands. The top-right quadrant shows the R workspace, which holds the data and other objects you have created in the current R session. The bottom-right quadrant is a window for graphics output, but it also has tabs to manage your file directories, R packages, and the R Help facility. On the bottom left is the R Console window, where the code gets executed and the output is produced. You can run the commands, sending the code from the editor to the console, by highlighting it and hitting the Run button, or the Ctrl-Enter key combination. It is also possible to type and run commands directly into the console window (in this case, nothing will be saved). The top-right quadrant shows the R workspace, which holds the data and other objects you have created in the current R session. There is the file tab, where you can navigate files and folders and find, for instance, the data sets you want to upload. The bottom-right quadrant is a window for graphics output. Here you can visualize your plots. There is also a tab for the R packages, and the R Help facility. 2.1.5 Load and Save Data To load data into R you can click on the file window in the top-right quadrant, navigate your files/folders, and once you have found your data set file, you can just click it and follow the semi-automated import procedure. Import Data Otherwise, you can upload a data set by using a function. For instance, to import a csv file, one of the most common format for data sets, it can be employed the function read.csv. The main argument of this function is the path of the file you want to upload. To specify the file path, consider that you are working within a specific environment, that is, your working directory is the folder of the project (you can double check the working directory you are working in, by running the command getwd()). Thus, to indicate the path of the data set you want to upload, you can write a dot followed by a slash ./, followed by the path of the data set inside the working directory. For instance, in the case below, the data set is saved in a folder named data inside the working directory. The name of the data set is tweets_vienna and its extension is .csv. Therefore, the code to upload the file is as follows: fake_news &lt;- read.csv(&quot;./data/fake-news-stories-over-time-20210111144200.csv&quot;) To save data there are a few options. Generally, if you want to save a data set, you can opt for the .csv or the .rds format. The .rds format is only readable by R, while the .csv is a “universal” format (you can read it with Excel, for instance). To save a file as .csv it can be used the function write.csv. The main arguments of this function are the name of the object that has to be saved, the path to the folder where the object will be saved, and the name we want to assign to the file. write.csv(fake_news, file = &quot;./data/fake_news.csv&quot;) To save .rds file the procedure is similar, but the saveRDS function has to be employed. Instead, to read an rds file, the appropriate function is readRDS. saveRDS(fake_news, file = &quot;./data/fake_news.rds&quot;) fake_news &lt;- readRDS(&quot;./data/fake_news.rds&quot;) # read a .rds file In the code above you can notice an hash mark sign followed by some text. It is a comment. Comments are textual content used to describe the code in order to make it easier to understand and reuse it. Comments are written after the hash mark sign (#), because the text written after the hash mark sign is ignored by R: you can read the comments, but R does not consider them as code. 2.1.6 Create new Folders It is a good practice to create, in the main folder of the project, sub-folders dedicated to different type of files used in the project, such as a folder “data” for the data sets. To create a new folder you can go to the Files windows in the RStudio interface, click New Folder, and give it a name. 2.2 Basic R 2.2.1 Objects An object is an R entity composed of a name and a value. The arrow (&lt;-) sign is used to create objects and assign a value to an object (or to change or “update” its previous value). Example: create an object with name “object_consisting_of_a_number” and value equal 2: object_consisting_of_a_number &lt;- 2 Enter the name of the object in the console and run the command: the value assigned to the object will be printed. object_consisting_of_a_number ## [1] 2 The object is equal to its value. Therefore, for instance, an object with a numerical value can be used to perform arithmetical operations. object_consisting_of_a_number * 10 ## [1] 20 The value of an object can be transformed: object_consisting_of_a_number &lt;- object_consisting_of_a_number * 10 object_consisting_of_a_number ## [1] 20 An object can also represent a function. Example: create an object for the sum (addition) function: function_sum &lt;- function(x, y){ result &lt;- x + y return(result) } The function can now be applied to two numerical values: function_sum(5, 2) ## [1] 7 Actually, we don’t need this function, since mathematical functions are already implemented in R. sum(5, 2) ## [1] 7 5 + 7 ## [1] 12 2 * 3 ## [1] 6 3^2 ## [1] 9 sqrt(9) ## [1] 3 The value of an object can be a number, a function, but also a vector. Vectors are sequences of values. vector_of_numbers &lt;- c(1,2,3,4,5,6,7,8,9,10) vector_of_numbers ## [1] 1 2 3 4 5 6 7 8 9 10 A vector of numbers can be the argument of mathematical operations. vector_of_numbers * 2 ## [1] 2 4 6 8 10 12 14 16 18 20 vector_of_numbers + 3 ## [1] 4 5 6 7 8 9 10 11 12 13 Other R objects are matrix, list, and data.frame. A matrix is a table composed of rows and columns containing only numerical values. a_matrix &lt;- matrix(data = 1:50, nrow = 10, ncol = 5) a_matrix ## [,1] [,2] [,3] [,4] [,5] ## [1,] 1 11 21 31 41 ## [2,] 2 12 22 32 42 ## [3,] 3 13 23 33 43 ## [4,] 4 14 24 34 44 ## [5,] 5 15 25 35 45 ## [6,] 6 16 26 36 46 ## [7,] 7 17 27 37 47 ## [8,] 8 18 28 38 48 ## [9,] 9 19 29 39 49 ## [10,] 10 20 30 40 50 A list is just a list of other objects. For instance, this list includes a numerical value, a vectors of numbers, and a matrix. a_list &lt;- list(object_consisting_of_a_number, vector_of_numbers, a_matrix) a_list ## [[1]] ## [1] 20 ## ## [[2]] ## [1] 1 2 3 4 5 6 7 8 9 10 ## ## [[3]] ## [,1] [,2] [,3] [,4] [,5] ## [1,] 1 11 21 31 41 ## [2,] 2 12 22 32 42 ## [3,] 3 13 23 33 43 ## [4,] 4 14 24 34 44 ## [5,] 5 15 25 35 45 ## [6,] 6 16 26 36 46 ## [7,] 7 17 27 37 47 ## [8,] 8 18 28 38 48 ## [9,] 9 19 29 39 49 ## [10,] 10 20 30 40 50 A data.frame is like a matrix that can contain numbers but also other types of data, such as characters (a textual type of data), or factors (unordered categorical variables, such as gender, or ordered categories, such as low, medium, high). Data sets are usually stored in data.frame. For instance, if you import a csv or an Excel file in R, the corresponding R object is a data.frame. # this is an object (vector) consisting of a series of numerical values numerical_vector &lt;- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) numerical_vector ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # this is another object (vector) consisting of a series of categorical values categorical_vector &lt;- c(&quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Monday&quot;, &quot;Wednesday&quot;,&quot;Thursday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Saturday&quot;, &quot;Sunday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;, &quot;Sunday&quot;) categorical_vector ## [1] &quot;Monday&quot; &quot;Tuesday&quot; &quot;Monday&quot; &quot;Tuesday&quot; &quot;Monday&quot; &quot;Wednesday&quot; &quot;Thursday&quot; ## [8] &quot;Wednesday&quot; &quot;Thursday&quot; &quot;Saturday&quot; &quot;Sunday&quot; &quot;Friday&quot; &quot;Saturday&quot; &quot;Sunday&quot; # this is an object consisting of a data.frame, created combining vectors through the function &quot;data.frame&quot; a_dataframe &lt;- data.frame(&quot;first_variable&quot; = numerical_vector, &quot;second_variable&quot; = categorical_vector) a_dataframe ## first_variable second_variable ## 1 1 Monday ## 2 2 Tuesday ## 3 3 Monday ## 4 4 Tuesday ## 5 5 Monday ## 6 6 Wednesday ## 7 7 Thursday ## 8 8 Wednesday ## 9 9 Thursday ## 10 10 Saturday ## 11 11 Sunday ## 12 12 Friday ## 13 13 Saturday ## 14 14 Sunday To access a specific column of a data.frame, you can use the name of the data.frame, the dollar symbol $, and the name of the column. a_dataframe$first_variable ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 a_dataframe$second_variable ## [1] Monday Tuesday Monday Tuesday Monday Wednesday Thursday Wednesday Thursday ## [10] Saturday Sunday Friday Saturday Sunday ## Levels: Friday Monday Saturday Sunday Thursday Tuesday Wednesday It is possible to add columns to a data.frame by writing: the name of the data.frame the dollar sign a name for the new column the arrow sign &lt;- a vector of values to be stored in the new column (it has to have length equal to the other vectors composing the data.frame) a_dataframe$a_new_variable &lt;- c(12, 261, 45, 29, 54, 234, 45, 42, 6, 267, 87, 3, 12, 9) a_dataframe ## first_variable second_variable a_new_variable ## 1 1 Monday 12 ## 2 2 Tuesday 261 ## 3 3 Monday 45 ## 4 4 Tuesday 29 ## 5 5 Monday 54 ## 6 6 Wednesday 234 ## 7 7 Thursday 45 ## 8 8 Wednesday 42 ## 9 9 Thursday 6 ## 10 10 Saturday 267 ## 11 11 Sunday 87 ## 12 12 Friday 3 ## 13 13 Saturday 12 ## 14 14 Sunday 9 Exercise: access the columns of a data frame 2.2.2 Functions A function is a coded operation that applies to an object (e.g.: a number, a textual feature etc.) to transform it based on specified rules. A function has a name (the name of the function) and some arguments. Among the arguments of a function there is always an object or a value, for instance a numerical value, which is the content the function is applied to, and other possible arguments (either mandatory or optional). Functions are operations applied to objects that give a certain output. E.g.: the arithmetical operation “addition” is a function that applies to two or more numbers to give, as its output, their sum. The arguments of the “sum” function are the numbers that are added together. The name of the function is written out of parentheses, and the arguments of the function inside the parentheses: sum(5, 3) ## [1] 8 Arguments of functions can be numbers but also textual features. For instance, the function paste creates a string composed of the strings that it takes as arguments. paste(&quot;the&quot;, &quot;cat&quot;, &quot;is&quot;, &quot;at&quot;, &quot;home&quot;) ## [1] &quot;the cat is at home&quot; In R you can sometimes find a “nested” syntax, which can be confusing. The best practice is to keep things as simple as possible. # this comment, written after the hash mark, describe what is going on here: two &quot;paste&quot; function nested together have been used (improperly! because they make the code more complicated than necessary) to show how functions can be nested together. It would have been better to use the &quot;paste&quot; function just one time! paste(paste(&quot;the&quot;, &quot;cat&quot;, &quot;is&quot;, &quot;at&quot;, &quot;home&quot;), &quot;and&quot;, &quot;sleeps&quot;, &quot;on&quot;, &quot;the&quot;, &quot;sofa&quot;) ## [1] &quot;the cat is at home and sleeps on the sofa&quot; To sum up, functions manipulate and transform objects. Data wrangling, data visualization, as well as data analysis, are performed through functions. 2.2.3 Data Types Variables can have different R formats, such as: double: numbers that include decimals (0.1, 5.676, 121.67). This format is appropriate for continuous variables; integer: such as 1, 2, 3, 10, 400. It is a format suitable to count data; factors: for categorical variables. Factors can be ordered (e.g.: level of agreement: “high”, “medium”, “low”), or not (e.g.: hair colors “blond”, “dark brown”, “brown”); characters: textual labels; logicals: the format of logical values (i.e.: TRUE and FALSE) dates: used to represent days; POSIX: a class of R format to represent dates and times. Figure 2.1: R data formats. Tables from Gaubatz, K. T. (2014). A Survivor’s Guide to R: An Introduction for the Uninitiated and the Unnerved. SAGE Publications. It is better to specify the appropriate type of data when importing a data set (also notice, in the example below, that the data types “date” requires users to specify the format of the dates. In the example, dates are in the format Year-Month-Day, which is represented in R as “%Y-%m-%d”). Import data and specify data types "],["basic-data-wrangling-with-tidyverse.html", "Chapter 3 Basic Data Wrangling with Tidyverse 3.1 Mutate 3.2 Rename 3.3 Summarize 3.4 Arrange 3.5 Filter 3.6 Select 3.7 Count occurrences", " Chapter 3 Basic Data Wrangling with Tidyverse Data wrangling is the process of transforming and mapping data from one “raw” data form into another format with the intent of making it more appropriate and valuable for a variety of downstream purposes such as analytics. The goal of data wrangling is to assure quality and useful data. Data analysts typically spend the majority of their time in the process of data wrangling compared to the actual analysis of the data. How to perform data wrangling operations in R: use basic R functions; employ specific libraries such as tidyverse. Tidyverse is an R library composed of functions that allow users to perform basic and advanced data science operations. https://www.tidyverse.org. In R, a library (or “package”) is a coherent collection of functions, usually created for specific purposes. To work with the tidyverse library, it is necessary to install it first, by using the following command: install.packages(“tidyverse”). After having installed tidyverse (or any other library), it is necessary to load it, so as we can work with its functions in the current R session: # to load a library used the command library(NAME-OF-THE-LIBRARY) library(tidyverse) Tidyverse has a peculiar syntax that includes the so-called pipe operator: %&gt;%. To manipulate data sets are useful the functions included in dplyr: a grammar of data manipulation, providing a consistent set of verbs that help you solve the most common data manipulation challenges, such as mutate, rename, summarize. 3.1 Mutate The function mutate adds new variables to a data.frame or overwrite existing variables. new_dataframe &lt;- a_dataframe %&gt;% mutate(just_another_variable = a_new_variable / 3) new_dataframe ## first_variable second_variable a_new_variable just_another_variable ## 1 1 Monday 12 4.000000 ## 2 2 Tuesday 261 87.000000 ## 3 3 Monday 45 15.000000 ## 4 4 Tuesday 29 9.666667 ## 5 5 Monday 54 18.000000 ## 6 6 Wednesday 234 78.000000 ## 7 7 Thursday 45 15.000000 ## 8 8 Wednesday 42 14.000000 ## 9 9 Thursday 6 2.000000 ## 10 10 Saturday 267 89.000000 ## 11 11 Sunday 87 29.000000 ## 12 12 Friday 3 1.000000 ## 13 13 Saturday 12 4.000000 ## 14 14 Sunday 9 3.000000 3.2 Rename Rename is a function to change the name of columns (sometimes it can be useful). new_dataframe &lt;- new_dataframe %&gt;% # rename (new_name = old_name) rename(ID = first_variable, Day = second_variable, Tweets = a_new_variable, Users = just_another_variable) new_dataframe ## ID Day Tweets Users ## 1 1 Monday 12 4.000000 ## 2 2 Tuesday 261 87.000000 ## 3 3 Monday 45 15.000000 ## 4 4 Tuesday 29 9.666667 ## 5 5 Monday 54 18.000000 ## 6 6 Wednesday 234 78.000000 ## 7 7 Thursday 45 15.000000 ## 8 8 Wednesday 42 14.000000 ## 9 9 Thursday 6 2.000000 ## 10 10 Saturday 267 89.000000 ## 11 11 Sunday 87 29.000000 ## 12 12 Friday 3 1.000000 ## 13 13 Saturday 12 4.000000 ## 14 14 Sunday 9 3.000000 The previous two steps can be performed at the same time, by concatenating the operations through the pipe %&gt;% operator. new_dataframe &lt;- a_dataframe %&gt;% # this is &quot;mutate&quot;, the first function we applied mutate(just_another_variable = a_new_variable / 3) %&gt;% # this is &quot;rename&quot;, the second function we applied rename(ID = first_variable, Day = second_variable, Tweets = a_new_variable, Users = just_another_variable) new_dataframe ## ID Day Tweets Users ## 1 1 Monday 12 4.000000 ## 2 2 Tuesday 261 87.000000 ## 3 3 Monday 45 15.000000 ## 4 4 Tuesday 29 9.666667 ## 5 5 Monday 54 18.000000 ## 6 6 Wednesday 234 78.000000 ## 7 7 Thursday 45 15.000000 ## 8 8 Wednesday 42 14.000000 ## 9 9 Thursday 6 2.000000 ## 10 10 Saturday 267 89.000000 ## 11 11 Sunday 87 29.000000 ## 12 12 Friday 3 1.000000 ## 13 13 Saturday 12 4.000000 ## 14 14 Sunday 9 3.000000 To check the data format of the variables stored in the data.frame can be used the command str(): str(new_dataframe) ## &#39;data.frame&#39;: 14 obs. of 4 variables: ## $ ID : num 1 2 3 4 5 6 7 8 9 10 ... ## $ Day : Factor w/ 7 levels &quot;Friday&quot;,&quot;Monday&quot;,..: 2 6 2 6 2 7 5 7 5 3 ... ## $ Tweets: num 12 261 45 29 54 234 45 42 6 267 ... ## $ Users : num 4 87 15 9.67 18 ... Sometimes variables are stored in the data.frame in the wrong format (see the paragraph “data type”) and we want to convert them into a new data format. For this purpose we can use, again, the function mutate, along with other functions such as.integer, as.numeric, as.character, as.factors, or as.logical, as.Date, or as.POSIXct() based on the desired data format (it is possible and advisable to upload the data by paying attention to the type of data so as this step is not necessary). new_dataframe &lt;- new_dataframe %&gt;% # as.character to transform the &quot;ID&quot; column in a character variable mutate(ID = as.character(ID), # as.integer to transform the values of the &quot;Tweets&quot; and &quot;Users&quot; column from numeric to integer Tweets = as.integer(Tweets), Users = as.integer(Users)) new_dataframe ## ID Day Tweets Users ## 1 1 Monday 12 4 ## 2 2 Tuesday 261 87 ## 3 3 Monday 45 15 ## 4 4 Tuesday 29 9 ## 5 5 Monday 54 18 ## 6 6 Wednesday 234 78 ## 7 7 Thursday 45 15 ## 8 8 Wednesday 42 14 ## 9 9 Thursday 6 2 ## 10 10 Saturday 267 89 ## 11 11 Sunday 87 29 ## 12 12 Friday 3 1 ## 13 13 Saturday 12 4 ## 14 14 Sunday 9 3 str(new_dataframe) ## &#39;data.frame&#39;: 14 obs. of 4 variables: ## $ ID : chr &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ... ## $ Day : Factor w/ 7 levels &quot;Friday&quot;,&quot;Monday&quot;,..: 2 6 2 6 2 7 5 7 5 3 ... ## $ Tweets: int 12 261 45 29 54 234 45 42 6 267 ... ## $ Users : int 4 87 15 9 18 78 15 14 2 89 ... 3.3 Summarize To aggregate data and calculate synthetic values (for instance, the average number of tweets by day), it can be used the function group_by (to aggregate data, for instance by day), and summarize, to calculate the summary values. summary_data &lt;- new_dataframe %&gt;% group_by(Day) %&gt;% summarize(average_tweets = mean(Tweets), average_users = mean(Users)) summary_data ## # A tibble: 7 x 3 ## Day average_tweets average_users ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Friday 3 1 ## 2 Monday 37 12.3 ## 3 Saturday 140. 46.5 ## 4 Sunday 48 16 ## 5 Thursday 25.5 8.5 ## 6 Tuesday 145 48 ## 7 Wednesday 138 46 3.4 Arrange To explore a data set it can be useful to sort the data (e.g.: from the lowest to the highest number of a variable). With tidyverse, we can order a data.frame by using the function arrange. summary_data %&gt;% arrange(average_tweets) ## # A tibble: 7 x 3 ## Day average_tweets average_users ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Friday 3 1 ## 2 Thursday 25.5 8.5 ## 3 Monday 37 12.3 ## 4 Sunday 48 16 ## 5 Wednesday 138 46 ## 6 Saturday 140. 46.5 ## 7 Tuesday 145 48 To order data from the highest to the lowest values (a descending order) the minus sign has to be added. summary_data %&gt;% arrange(-average_tweets) ## # A tibble: 7 x 3 ## Day average_tweets average_users ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Tuesday 145 48 ## 2 Saturday 140. 46.5 ## 3 Wednesday 138 46 ## 4 Sunday 48 16 ## 5 Monday 37 12.3 ## 6 Thursday 25.5 8.5 ## 7 Friday 3 1 # or # arrange(desc(average_tweets)) 3.5 Filter The function filter keeps the cases we want to focus on. The arguments of this function represent a condition that has to be fulfilled: the name of the column that has to be filtered, and the column values to be kept. For instance, we may want to keep just the rows that, in the column “Day”, correspond to Tuesday. new_dataframe %&gt;% filter(Day == &quot;Tuesday&quot;) ## ID Day Tweets Users ## 1 2 Tuesday 261 87 ## 2 4 Tuesday 29 9 Or the rows including a number of tweets higher than or equal to 50. new_dataframe %&gt;% filter(Tweets &gt;= 50) ## ID Day Tweets Users ## 1 2 Tuesday 261 87 ## 2 5 Monday 54 18 ## 3 6 Wednesday 234 78 ## 4 10 Saturday 267 89 ## 5 11 Sunday 87 29 It is also possible to use multiple conditions at the same time. new_dataframe %&gt;% filter(Tweets &gt;= 50, Users &gt; 30) ## ID Day Tweets Users ## 1 2 Tuesday 261 87 ## 2 6 Wednesday 234 78 ## 3 10 Saturday 267 89 3.6 Select Select is used to keep just some of the columns of the original data.frame. For instance, we can apply the function in order to keep just the column “Day” and “Tweets”. new_dataframe %&gt;% select(Day, Tweets) ## Day Tweets ## 1 Monday 12 ## 2 Tuesday 261 ## 3 Monday 45 ## 4 Tuesday 29 ## 5 Monday 54 ## 6 Wednesday 234 ## 7 Thursday 45 ## 8 Wednesday 42 ## 9 Thursday 6 ## 10 Saturday 267 ## 11 Sunday 87 ## 12 Friday 3 ## 13 Saturday 12 ## 14 Sunday 9 3.7 Count occurrences A useful operation to perform when summarizing data, is to count the occurrences of a certain variable (mostly qualitative). For instance, to count how many times the name of each day occurs it can be used the function n() inside the summarize function. new_dataframe %&gt;% group_by(Day) %&gt;% summarize(average_tweets = mean(Tweets), average_users = mean(Users), day_occurrences = n()) ## # A tibble: 7 x 4 ## Day average_tweets average_users day_occurrences ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 Friday 3 1 1 ## 2 Monday 37 12.3 3 ## 3 Saturday 140. 46.5 2 ## 4 Sunday 48 16 2 ## 5 Thursday 25.5 8.5 2 ## 6 Tuesday 145 48 2 ## 7 Wednesday 138 46 2 "],["readings.html", "Chapter 4 Readings 4.1 Bibliographical References", " Chapter 4 Readings This page will be updated as the course goes on. Wells, C., Shah, D. V., Pevehouse, J. C., Foley, J., Lukito, J., Pelled, A., &amp; Yang, J. (2019). The Temporal Turn in Communication Research: Time Series Analyses Using Computational Approaches. International Journal of Communication (19328036), 13. 4.1 Bibliographical References Gaubatz, K. T. (2014). A Survivor’s Guide to R: An Introduction for the Uninitiated and the Unnerved. SAGE Publications. "]]
